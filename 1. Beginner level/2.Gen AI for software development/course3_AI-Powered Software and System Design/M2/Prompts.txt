Video :Setting up a simple Database
Suggest a lightweight but powerful Python setup that uses a file-based database so that I can practice working with databases. I want the code to be able to run in Google Colab.

Here is code that I'm using to create a database in a Jupyter notebook using SQLAlchemy and SQLite:
engine = create_engine('sqlite:///ecommerce.db', echo=True)
Give me some simple code that I can use to check that this connection is live.


Video :Design and implement a database schema:
Prompting LLMs to design database schema:
I need to develop a database for a social network.
The database will track individual people, and store information about them including their name, age, hometown, and hobbies.
The database will also store relationships between people, including family relationships, friendships, work colleagues, and schoolmates.
Suggest a schema that would work for this.

Creating the e-commerce schema:
Design a database schema for an e-commerce application with tables for users, products, orders, and order_items.
Try specifying specific attribute names, or allowed data types for columns, and see how the schema changes!

Prompting LLM to design database schema:
I have a SQLite database set up in Python using SQLAlchemy.
Help me implement tables for the following schema:
1. Users:
   - id (Primary Key)
   - name
   - email (Unique)
2. Products:
   - id (Primary Key)
   - name
   - price
3. Orders:
   - id (Primary Key)
   - user_id (Foreign Key referencing Users)
4. Order_items:
   - id (Primary Key)
   - order_id (Foreign Key referencing Orders)
   - product_id (Foreign Key referencing Products)
   - quantity

Video:Implementing CRUD(Create, Read, Update and Delete) operations:
The Create Operation:
What are the things to consider when you implement the create operation for a database?

How can I create a function to add a new user to the users
table of this database?
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
metadata = MetaData()
users = Table('users', metadata,
Column('id', Integer, primary_key=True),
Column('name', String),
Column('email', String, unique=True))   
products = Table('products', metadata,
Column('id', Integer, primary_key=True),
Column('name', String),
Column('price', Integer))

Implementing Read functionality:
Generate code that implements a read function for this database. It should return a list of all users currently in the database:
from sqlalchemy import Table, Column, Integer, String, MetaData, Foreignkey
metadata = MetaData()
users = Table('users', metadata,
Column('id', Integer, primary_key=True),
Column(name, String),
Column('email', String, unique=True))   
products = Table('products', metadata,
Column('id', Integer, primary_key=True),
Column(name, String),
Column('price', Integer))

Implementing update functionality:
Generate code that implements an update function for this database. I want to use it to update the email address of a user.
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
metadata = MetaData()
users = Table('users', metadata,
Column('id', Integer, primary_key=True),
Column('name', String),
Column('email', String, unique=True))   
products = Table('products', metadata,
Column('id', Integer, primary_key=True),
Column('name', String),
Column('price', Integer))

Implementing Delete functionality:
Generate code that implements an delete function for this database to delete a record based on their user_id:
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
metadata = MetaData()
users = Table('users', metadata,
Column('id', Integer, primary_key=True),
Column('name', String),
Column('email', String, unique=True))   
products = Table('products', metadata,
Column('id', Integer, primary_key=True),
Column('name', String),
Column('price', Integer))

Checking for vulnerabilties:
 I'm using this code in a SQL database. Is there a chance that it's vulnerable to SQL injection attack as SQLAlchemy appears to use SQL under-the-hood?
from sqlalchemy.orm import sessionmaker
Session = sessionmaker(bind=engine)
session = Session()
def add_user(name, email):
new_user = users.insert().values(name=name, email=email)
session.execute(new_user)
session.commit()

Video:Advance quering:
The database_schema_crud.py file contains the code that defines the schema and CRUD operations.
FullORMDB.py is a notebook that contains the same code as the python file, and also some code to add data and check that it has been added successfully. You can open that notebook in your environment of choice if you want to try out the code and follow along.

Asking an LLM to write SQL queries:
Write a SQLAlchemy query to find all orders placed by a specific user in the e-commerce database.
(paste full codes/FullORMDB.py file codes until CRUD operation to make it understand for LLM)

Prompting for more complex SQL queries:
Write a SQLAlchemy query to find the total quantity of each product sold in this database.

Video:Databaset optimization:
Using an LLM to optimize your database:
What are some best practices to improve the performance of this database?
Note: this assumes you are continuing your ongoing database chat with the LLM, so that the code and full context are available to the model.

Digging deeper with followup prompts:
What are the best practices for indexing in a SQL database?

Optimizing the database

Schema Design
Indexing
Query Optimization
Caching
Connection Management
Monitoring and Maintenance

How can I implement basic query caching in SQLAlchemy?
Then add the code that the LLM writes (or use the caching implementation in cached_get_all_products.py) and try using the time package in Python to measure the time to execute the query with and without the cache.

Choosing the best datatypes:
What are the best practices for choosing data types in a SQL database?

Video: Debugging:
Usinf LLMs to debug database errors:
 How do I handle database connection errors in SQLAlchemy?

Handling edge cases:
 How do I handle duplicate entry errors in SQLAlchemy?

Tracking down bugs with logging:
How do I enable SQL query logging in SQLAlchemy?

Logging to a file:
Modify the logging setup to save the log output to a file on disk.

Handling Transaction error:
 How do I handle transaction errors in SQLAlchemy?

Debugging Queries:
How do I use the EXPLAIN feature in SQLAlchemy to debug queries?

An EXPLAIN query gave me this output -- can you please tell me what it means?
[(0, 'Init', 0, 9, 8, None, 0, None),
(1, 'OpenRead', 0, 2, 0, '3', 0, None),
1, 0, None, 0, None),
(2, 'Integer', 1,
(3, 'SeekRowid', 0, 8, 1, None, 0, None),
(4, 'Rowid', 0, 2, 0, None, 0, None),
(5, 'Column', 0, 1, 3, None, 0, None),
(6, 'Column', 0, 2, 4, None, 0, None),
(7, 'ResultRow', 2, 3, 0, None, 0, None),
(8, 'Halt', 0, 0, 0, None, 0, None),
(9, 'Transaction', 0, 0, 4, '0', 1, None),
(10, 'Goto', 0, 1, 0, None, 0, None)]



Graded lab task
1.Create code that, given a particular club, finds all members of that club
2.Create code that, given the name of a person, finds all the friends of that person
3.Create code that, given the name of a person, finds all the people that consider that person a friend